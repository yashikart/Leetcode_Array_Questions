Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.



Answers :

## Method1
class Solution(object):
    def twoSum(self, nums, target):
        for i in range(len(nums)-1):
            for j in range(i+1, len(nums)):
                total = nums[i] + nums[j]
                if target == total:
                    return [i,j]

⏱️ Time Complexity:
    The outer loop runs n - 1 times (where n is the length of nums).
    The inner loop runs up to n - i - 1 times.
    So overall, the nested loops check all pairs:
    Total comparisons = O(n²) So Time Complexity: O(n²)

🧠 Space Complexity:
    You are not using any extra data structures—only a few variables (i, j, total), all of which take constant space.
    You return a list [i, j], but that's a fixed-size output (2 elements), so it doesn't count toward space complexity.
    Space Complexity: O(1)


##Method2 
class Solution(object):
    def twoSum(self, nums, target):
        lookup = {}
        for i, num in enumerate(nums):
            complement = target - num
            if complement in lookup:
                return [lookup[complement], i]
            lookup[num] = i
        return []

Time Complexity: O(n)
Space Complexity: O(n)
