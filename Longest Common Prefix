Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters if it is non-empty.


Answer:

class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs:
            return ""
        res = []
        
        for char in zip(*strs):
            if len(set(char)) == 1:
                res.append(char[0])
            else:
                break

        return "".join(res)

# Complexity
# - Time complexity:  **O(m × n)**
#   • n = number of strings  
#   • m = length of the shortest string  
#   We examine at most one character from each string per column; in the worst case
#   (all strings share the entire shortest length) we touch every character once.

# - Space complexity: **O(m)**
#   The list `res` can grow to at most m characters—the length of the final prefix.
#   Apart from this output buffer the algorithm uses only constant auxiliary space.








Ask ChatGPT
