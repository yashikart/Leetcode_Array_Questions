
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


Answer

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        my_list = nums1 + nums2             # O(m + n)
        new_list = sorted(my_list)          # O((m + n) log(m + n))
        n = len(new_list)

        if n % 2 == 1:
            return float(new_list[n // 2])  # O(1)
        else:
            mid1 = new_list[n // 2 - 1]
            mid2 = new_list[n // 2]
            return (mid1 + mid2) / 2.0      # O(1)
Time Complexity:
Merging Arrays (nums1 + nums2) â†’ O(m + n)

Sorting the Combined Array â†’ O((m + n) log(m + n))

Accessing Median Elements â†’ O(1)

âœ… Total Time Complexity:
ðŸ”¹ O((m + n) log(m + n))
where m = len(nums1), n = len(nums2)

ðŸ§  Space Complexity:
my_list and new_list â†’ new arrays storing all elements
â†’ O(m + n) extra space

âœ… Total Space Complexity:
ðŸ”¹ O(m + n)

